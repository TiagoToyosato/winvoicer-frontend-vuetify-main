<template>
  <header class="header">
    <div class="logo">
      <!-- Your logo or site name here -->
      <router-link
        to="/"
        class="logo-link"
      >
        My Site
      </router-link>
    </div>
    <nav class="nav">
      <ul
        class="nav-list"
        :class="{ 'is-open': isOpen }"
      >
        <li
          v-for="link in links"
          :key="link.path"
          class="nav-item"
        >
          <router-link
            :to="link.path"
            class="nav-link"
            @click="closeNav"
          >
            {{ link.name }}
          </router-link>
        </li>
      </ul>
      <button
        class="nav-toggle"
        @click="toggleNav"
      >
        <span class="nav-toggle-bar" />
        <span class="nav-toggle-bar" />
        <span class="nav-toggle-bar" />
      </button>
    </nav>
  </header>
</template>

<script lang="ts">
import { defineComponent, ref, computed, onMounted, watch } from "vue"
import { useRoute } from "vue-router"

interface Link {
  name: string
  path: string
}

export default defineComponent({
  name: "HeaderComponent",

  setup() {
    const route = useRoute()

    const isOpen = ref(false)
    const isDesktop = ref(false)
    const links: Link[] = [
      { name: "Home", path: "/" },
      { name: "About", path: "/about" },
      { name: "Contacts", path: "/contacts" },
      { name: "Services", path: "/services" },
    ]

    const toggleNav = () => {
      isOpen.value = !isOpen.value
    }

    const closeNav = () => {
      isOpen.value = false
    }

    const updateIsDesktop = () => {
      isDesktop.value = window.innerWidth >= 1024
    }

    onMounted(() => {
      updateIsDesktop()
      window.addEventListener("resize", updateIsDesktop)
    })

    watch(route, closeNav)

    const navClasses = computed(() => ({
      "nav-list": true,
      "is-desktop": isDesktop.value,
    }))

    return {
      isOpen,
      isDesktop,
      links,
      toggleNav,
      closeNav,
      navClasses,
    }
  },
})
</script>

<style scoped>
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #333;
  color: #fff;
  padding: 0.5rem 1rem;
  position: relative;
  z-index: 2;
}

.logo-link {
  font-size: 1.5rem;
  font-weight: bold;
  color: #fff;
  text-decoration: none;
}

.nav {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: #222;
  color: #fff;
  transition: transform 0.3s ease-out;
  transform: translateY(-100%);
  z-index: -1;
}

.nav-list {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.nav-item {
  margin: 0.5rem 0;
}

.nav-link {
  font-size: 1.2rem;
  color: #fff;
  text-decoration: none;
}

.nav-toggle {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  width: 2rem;
  height: 1.5rem;
  margin-left: auto;
  padding: 0.5rem;
  background-color: transparent;
  border: none;
  cursor: pointer;
}

.nav-toggle-bar {
  width: 100%;
  height: 4px;
  background-color: #fff;
  border-radius: 2px;
  transition: transform 0.3s ease-out;
}

.nav-toggle-bar:first-child {
  transform-origin: top;
}

.nav-toggle-bar:last-child {
  transform-origin: bottom;
}

.is-open {
  transform: translateY(0);
  z-index: 1;
}

@media (min-width: 1024px) {
  .nav-list {
    flex-direction: row;
    justify-content: center;
  }

  .nav-item {
    margin: 0 1rem;
  }

  .nav-link {
    font-size: 1rem;
  }
}
</style>
